* Broadcom STB NAND Controller

The Broadcom STB NAND controller utilizes the MTD subsystem to provide generic
access to NAND flash chips.

Required properties:
- compatible     : should contain "brcm,brcmnand" and an appropriate version
                   compatibility string, like "brcm,brcmnand-v7.0"
- reg            : the register start and length for NAND and (optionally, see
                  'flash-dma' property) FLASH_DMA blocks
- interrupts     : The HIF interrupt, for both NAND CTLRDY and FLASH_DMA_DONE
- #address-cells : <1> - subnodes give the chip-select number
- #size-cells    : <0>

Optional properties:
- flash-dma      : boolean, indicating controller support for FLASH_DMA; if set,
		   then the appropriate register range must be included in the
                   reg property

Each controller (compatible: "brcm,brcmnand") may contain one or more subnodes
to represent enabled chip-selects which (may) contain NAND flash chips. Their
properties are as follows.

Required properties:
- compatible        : should contain "brcm,nandcs"
- reg               : a single integer representing the chip-select number
                      (e.g., 0, 1, 2, etc.)
- #address-cells    : see partition.txt
- #size-cells       : see partition.txt

Optional properties:
- nand-on-flash-bbt : boolean, to enable the on-flash BBT for this chip-select

Each nandcs device node may optionally contain sub-nodes describing the flash
partition mapping. See partition.txt for more detail.

Example:

nand@f0442800 {
	compatible = "brcm,brcmnand-v7.0", "brcm,brcmnand";
	reg = <0xF0442800 0x600>,
	      <0xF0443000 0x100>;
	interrupts = <0 32 0>;
	flash-dma;

	#address-cells = <1>;
	#size-cells = <0>;

	nandcs@1 {
		compatible = "brcm,nandcs";
		reg = <1>; // Chip select 1
		nand-on-flash-bbt;

		// Partitions
		#address-cells = <1>;  // <2>, for 64-bit offset
		#size-cells = <1>;     // <2>, for 64-bit length
		flash0.rootfs@0 {
			reg = <0 0x10000000>;
		};
		flash0@0 {
			reg = <0 0>; // MTDPART_SIZ_FULL
		};
		flash0.kernel@10000000 {
			reg = <0x10000000 0x400000>;
		};
	};
};
